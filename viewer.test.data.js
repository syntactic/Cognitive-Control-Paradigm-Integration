// viewer.test.data.js - Curated test fixtures for testing new block-grouping functionality

// Fixture 1: Multi-Condition Block with different Trial_Transition_Type values
const multiConditionBlock = [
    {
        Experiment: 'TestBlock_A_Switch',
        Block_ID: 'TestBlock_A',
        N_Tasks: 1,
        Task_1_Type: 'Movement',
        Task_2_Type: '',
        Stimulus_Valency: 'Univalent',
        'Stimulus Bivalence & Congruency': 'N/A',
        Simplified_RSO: 'Identical',
        SRM_1: 'Compatible',
        SRM_2: '',
        Switch_Rate_Percent: 50,
        Description: 'Switch condition in block A',
        Sequence_Type: 'Random',
        Trial_Transition_Type: 'Switch',
        RSI_Distribution_Type: 'fixed',
        RSI_Distribution_Params: '[]',
        SOA_Distribution_Type: 'fixed', 
        SOA_Distribution_Params: '[]',
        ITI_ms: 1000,
        coh_1: 0.8,
        coh_2: 0.0,
        effective_start_cue1: 0,
        effective_end_cue1: 50,
        effective_start_go1: 200,
        effective_end_go1: 250,
        effective_start_stim1_mov: 200,
        effective_end_stim1_mov: 700,
        effective_start_stim2_mov: 0,
        effective_end_stim2_mov: 0,
        effective_start_cue2: 0,
        effective_end_cue2: 0,
        effective_start_go2: 0,
        effective_end_go2: 0,
        effective_start_stim1_or: 200,
        effective_end_stim1_or: 700,
        effective_start_stim2_or: 0,
        effective_end_stim2_or: 0,
        viewer_config: '{"sequence_type": "AABB"}'
    },
    {
        Experiment: 'TestBlock_A_Repeat',
        Block_ID: 'TestBlock_A',
        N_Tasks: 1,
        Task_1_Type: 'Movement',
        Task_2_Type: '',
        Stimulus_Valency: 'Univalent',
        'Stimulus Bivalence & Congruency': 'N/A',
        Simplified_RSO: 'Identical',
        SRM_1: 'Compatible',
        SRM_2: '',
        Switch_Rate_Percent: 50,
        Description: 'Repeat condition in block A',
        Sequence_Type: 'Random',
        Trial_Transition_Type: 'Repeat',
        RSI_Distribution_Type: 'fixed',
        RSI_Distribution_Params: '[]',
        SOA_Distribution_Type: 'fixed',
        SOA_Distribution_Params: '[]', 
        ITI_ms: 800,
        coh_1: 0.6,
        coh_2: 0.0,
        effective_start_cue1: 0,
        effective_end_cue1: 50,
        effective_start_go1: 200,
        effective_end_go1: 250,
        effective_start_stim1_mov: 200,
        effective_end_stim1_mov: 700,
        effective_start_stim2_mov: 0,
        effective_end_stim2_mov: 0,
        effective_start_cue2: 0,
        effective_end_cue2: 0,
        effective_start_go2: 0,
        effective_end_go2: 0,
        effective_start_stim1_or: 200,
        effective_end_stim1_or: 700,
        effective_start_stim2_or: 0,
        effective_end_stim2_or: 0,
        viewer_config: '{"sequence_type": "AABB"}'
    },
    {
        Experiment: 'TestBlock_A_Pure',
        Block_ID: 'TestBlock_A',
        N_Tasks: 1,
        Task_1_Type: 'Movement',
        Task_2_Type: '',
        Stimulus_Valency: 'Univalent',
        'Stimulus Bivalence & Congruency': 'N/A',
        Simplified_RSO: 'Identical',
        SRM_1: 'Compatible',
        SRM_2: '',
        Switch_Rate_Percent: 50,
        Description: 'Pure condition in block A',
        Sequence_Type: 'Random',
        Trial_Transition_Type: 'Pure',
        RSI_Distribution_Type: 'fixed',
        RSI_Distribution_Params: '[]',
        SOA_Distribution_Type: 'fixed',
        SOA_Distribution_Params: '[]',
        ITI_ms: 1200,
        coh_1: 0.9,
        coh_2: 0.0,
        effective_start_cue1: 0,
        effective_end_cue1: 50,
        effective_start_go1: 200,
        effective_end_go1: 250,
        effective_start_stim1_mov: 200,
        effective_end_stim1_mov: 700,
        effective_start_stim2_mov: 0,
        effective_end_stim2_mov: 0,
        effective_start_cue2: 0,
        effective_end_cue2: 0,
        effective_start_go2: 0,
        effective_end_go2: 0,
        effective_start_stim1_or: 200,
        effective_end_stim1_or: 700,
        effective_start_stim2_or: 0,
        effective_end_stim2_or: 0,
        viewer_config: '{"sequence_type": "AABB"}'
    }
];

// Fixture 2: Single-Condition Block (no Block_ID)
const singleConditionBlock = [
    {
        Experiment: 'SingleCondition_Test',
        Block_ID: '',
        N_Tasks: 2,
        Task_1_Type: 'Movement',
        Task_2_Type: 'Orientation',
        Stimulus_Valency: 'Univalent',
        'Stimulus Bivalence & Congruency': 'N/A',
        Simplified_RSO: 'Disjoint',
        SRM_1: 'Compatible',
        SRM_2: 'Compatible',
        Switch_Rate_Percent: 0,
        Description: 'Single dual-task condition',
        Sequence_Type: 'Random',
        Trial_Transition_Type: 'Pure',
        RSI_Distribution_Type: 'fixed',
        RSI_Distribution_Params: '[]',
        SOA_Distribution_Type: 'fixed',
        SOA_Distribution_Params: '[]',
        ITI_ms: 1500,
        coh_1: 0.8,
        coh_2: 0.6,
        effective_start_cue1: 0,
        effective_end_cue1: 50,
        effective_start_go1: 100,
        effective_end_go1: 150,
        effective_start_stim1_mov: 100,
        effective_end_stim1_mov: 600,
        effective_start_stim2_mov: 0,
        effective_end_stim2_mov: 0,
        effective_start_cue2: 150,
        effective_end_cue2: 200,
        effective_start_go2: 200,
        effective_end_go2: 250,
        effective_start_stim1_or: 0,
        effective_end_stim1_or: 0,
        effective_start_stim2_or: 200,
        effective_end_stim2_or: 700
    }
];

// Fixture 3: Dynamic SOA and RSI Distribution Data
const dynamicDistributionBlock = [
    {
        Experiment: 'DynamicSOA_Uniform',
        Block_ID: 'DynamicTest_B',
        N_Tasks: 2,
        Task_1_Type: 'Movement',
        Task_2_Type: 'Orientation',
        Stimulus_Valency: 'Univalent',
        'Stimulus Bivalence & Congruency': 'N/A',
        Simplified_RSO: 'Identical',
        SRM_1: 'Compatible',
        SRM_2: 'Compatible',
        Switch_Rate_Percent: 0,
        Description: 'Dynamic uniform SOA distribution',
        Sequence_Type: 'Random',
        Trial_Transition_Type: 'Pure',
        RSI_Distribution_Type: 'uniform',
        RSI_Distribution_Params: '[800, 1200]',
        SOA_Distribution_Type: 'uniform',
        SOA_Distribution_Params: '[50, 200]',
        ITI_ms: 1000,
        coh_1: 0.8,
        coh_2: 0.6,
        effective_start_cue1: 0,
        effective_end_cue1: 50,
        effective_start_go1: 100,
        effective_end_go1: 150,
        effective_start_stim1_mov: 100,
        effective_end_stim1_mov: 600,
        effective_start_stim2_mov: 0,
        effective_end_stim2_mov: 0,
        effective_start_cue2: 150,
        effective_end_cue2: 200,
        effective_start_go2: 200,
        effective_end_go2: 250,
        effective_start_stim1_or: 0,
        effective_end_stim1_or: 0,
        effective_start_stim2_or: 200,
        effective_end_stim2_or: 700
    },
    {
        Experiment: 'DynamicSOA_Choice',
        Block_ID: 'DynamicTest_C',
        N_Tasks: 1,
        Task_1_Type: 'Movement',
        Task_2_Type: '',
        Stimulus_Valency: 'Bivalent-Incongruent',
        'Stimulus Bivalence & Congruency': 'Incongruent',
        Simplified_RSO: 'Identical',
        SRM_1: 'Compatible',
        SRM_2: '',
        Switch_Rate_Percent: 50,
        Description: 'Dynamic choice SOA distribution',
        Sequence_Type: 'Random',
        Trial_Transition_Type: 'Switch',
        RSI_Distribution_Type: 'choice',
        RSI_Distribution_Params: '[500, 1000, 1500, 2000]',
        SOA_Distribution_Type: 'choice', 
        SOA_Distribution_Params: '[0, 100, 200]',
        ITI_ms: 1000,
        coh_1: 0.8,
        coh_2: 0.5,
        effective_start_cue1: 0,
        effective_end_cue1: 50,
        effective_start_go1: 200,
        effective_end_go1: 250,
        effective_start_stim1_mov: 200,
        effective_end_stim1_mov: 700,
        effective_start_stim2_mov: 0,
        effective_end_stim2_mov: 0,
        effective_start_cue2: 0,
        effective_end_cue2: 0,
        effective_start_go2: 0,
        effective_end_go2: 0,
        effective_start_stim1_or: 200,
        effective_end_stim1_or: 700,
        effective_start_stim2_or: 0,
        effective_end_stim2_or: 0
    }
];

// Test fixture for Task 2 relative timing calculations
const dualTaskConditionForRelativeTiming = {
    Experiment: 'RelativeTimingTest',
    Block_ID: '',
    N_Tasks: 2,
    Task_1_Type: 'Movement',
    Task_2_Type: 'Orientation',
    Stimulus_Valency: 'Univalent',
    'Stimulus Bivalence & Congruency': 'N/A',
    Simplified_RSO: 'Identical',
    SRM_1: 'Compatible',
    SRM_2: 'Compatible',
    Switch_Rate_Percent: 0,
    Description: 'Dual-task condition for testing relative timing calculations',
    Sequence_Type: 'Random',
    Trial_Transition_Type: 'Pure',
    RSI_Distribution_Type: 'fixed',
    RSI_Distribution_Params: '[]',
    SOA_Distribution_Type: 'fixed',
    SOA_Distribution_Params: '[]',
    ITI_ms: 1000,
    coh_1: 0.8,
    coh_2: 0.6,
    // Task 1 (Movement) Channel 1
    effective_start_cue1: 0,
    effective_end_cue1: 50,
    effective_start_go1: 100,
    effective_end_go1: 150,
    effective_start_stim1_mov: 100,
    effective_end_stim1_mov: 600,  // Task 1 Movement ends at 600ms
    effective_start_stim2_mov: 0,
    effective_end_stim2_mov: 0,
    // Task 2 (Orientation) Channel 2  
    effective_start_cue2: 150,
    effective_end_cue2: 200,
    effective_start_go2: 200,
    effective_end_go2: 250,
    effective_start_stim1_or: 0,
    effective_end_stim1_or: 0,
    effective_start_stim2_or: 200,  // Task 2 Orientation starts at 200ms
    effective_end_stim2_or: 700     // Task 2 Orientation ends at 700ms
};

// Fixture 4: Block with inconsistent viewer_config for robustness testing
const inconsistentConfigBlock = [
    {
        Experiment: 'InconsistentBlock_Primary',
        Block_ID: 'InconsistentTest',
        N_Tasks: 1,
        Trial_Transition_Type: 'Switch',
        ITI_ms: 1000,
        coh_1: 0.8,
        coh_2: 0.0,
        effective_start_cue1: 0,
        effective_end_cue1: 50,
        effective_start_go1: 200,
        effective_end_go1: 250,
        effective_start_stim1_mov: 200,
        effective_end_stim1_mov: 700,
        effective_start_stim2_mov: 0,
        effective_end_stim2_mov: 0,
        effective_start_cue2: 0,
        effective_end_cue2: 0,
        effective_start_go2: 0,
        effective_end_go2: 0,
        effective_start_stim1_or: 200,
        effective_end_stim1_or: 700,
        effective_start_stim2_or: 0,
        effective_end_stim2_or: 0,
        viewer_config: '{"sequence_type": "AABB"}'
    },
    {
        Experiment: 'InconsistentBlock_Secondary',
        Block_ID: 'InconsistentTest',
        N_Tasks: 1,
        Trial_Transition_Type: 'Repeat',
        ITI_ms: 800,
        coh_1: 0.6,
        coh_2: 0.0,
        effective_start_cue1: 0,
        effective_end_cue1: 50,
        effective_start_go1: 200,
        effective_end_go1: 250,
        effective_start_stim1_mov: 200,
        effective_end_stim1_mov: 700,
        effective_start_stim2_mov: 0,
        effective_end_stim2_mov: 0,
        effective_start_cue2: 0,
        effective_end_cue2: 0,
        effective_start_go2: 0,
        effective_end_go2: 0,
        effective_start_stim1_or: 200,
        effective_end_stim1_or: 700,
        effective_start_stim2_or: 0,
        effective_end_stim2_or: 0,
        viewer_config: '{"sequence_type": "ABAB"}' // Different config
    }
];

module.exports = {
    multiConditionBlock,
    singleConditionBlock,
    dynamicDistributionBlock,
    dualTaskConditionForRelativeTiming,
    inconsistentConfigBlock
};